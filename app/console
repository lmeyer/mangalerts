#!/usr/bin/env php
<?php

set_time_limit(0);

use Desarrolla2\RSSClient\RSSClient;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

$app = require __DIR__.'/bootstrap.php';

$console = $app['console'];

$console->register( 'refresh-rss' )
	->setDescription('Crawl all RSS feed in order to find news')
	->setHelp('Usage: <info>.app/console refresh-rss</info>')
	->setCode(
	function(InputInterface $input, OutputInterface $output) use ($app)
	{
		$teams = TeamQuery::create()
			->filterByStatus(1)
			->find();

		$output->write( "Contacting external data sources ...\n");
		$client = new RSSClient();
		foreach($teams as $team) {
			$output->writeln('<info>' . $team->getName() . '</info>');

			$user_query = UserQuery::create()
				->filterByStatus(1);
			$users = $team->getUsers($user_query);
			if(!count($users)) {
				$output->writeln('No users subscribed to this team');
				continue;
			}

			$client->addFeed($team->getFeed(), 'feed'.$team->getId());
			try{
				@$posts = $client->fetch('feed'.$team->getId());
			} catch (Exception $e) {
				$output->writeln('Error when retrieving feed');
				if ($app['mailer.error.receiver'] && '' != $app['mailer.error.receiver']) {
					$content = $app['twig']->render('email/error.twig', array(
						'team' => $team,
						'error' => $e->getMessage()
					));
					$message = \Swift_Message::newInstance()
						->setContentType('text/html')
						->setSubject('[Mangalerts] Error - ' . $team->getName())
						->setFrom(array($app['mailer.from']))
						->setTo($app['mailer.error.receiver'])
						->setBody($content);

					//$app['mailer']->send($message);
				}
				continue;
			}

			$to_update = false;
			foreach ($posts as $post) {
				if($team->getLastCheck() >= $post->getPubDate()){
					$output->writeln('No more new post from this team');
					break;
				}
				$output->writeln('<comment>New post from ' . $team->getName() . '</comment>');
				$output->writeln($post->getTitle());
				$output->writeln($post->getlink());
				$output->writeln('');
				$to_update = true;

				$content = $app['twig']->render('email/alert.twig', array(
					'post' => $post,
					'team' => $team
				));
				$message = \Swift_Message::newInstance()
					->setContentType('text/html')
					->setSubject('[Mangalerts] New post from ' . $team->getName())
					->setFrom(array($app['mailer.from']))
					->setBody($content);

				foreach($users as $user){
					$message->setTo($user->getEmail());
					$app['mailer']->send($message);
				}


			}
			if ($to_update) {
				$team->setLastCheck(time());
				$team->save();
			}

		}
		if ($app['mailer.initialized']) {
			$app['swiftmailer.spooltransport']->getSpool()->flushQueue($app['swiftmailer.transport']);
		}
	}
);

$console->register( 'data-load' )
	->setDescription('Import fixtures data for developpement environment')
	->setHelp('Usage: <info>.app/console data-load</info>')
	->setCode(
	function(InputInterface $input, OutputInterface $output) use ($app)
	{
		$output->writeln( "Importing fixtures data ...");

		$teams = array(
			array(
				'name' => "FlyHigh Fansub",
				'feed' => "http://flyhigh-fansub.over-blog.com/rss-articles.xml",
				'url'  => "http://flyhigh-fansub.over-blog.com/",
				'email' => $app['mailer.error.receiver'],
				'status' => 1
			),
			array(
				'name' => "Fansub Resistance",
				'feed' => "http://www.fansub-resistance.info/rss.html",
				'url'  => "http://www.fansub-resistance.info/",
				'email' => $app['mailer.error.receiver'],
				'status' => 1
			),
			array(
				'name' => "Mirage-Team",
				'feed' => "http://www.mirage-team.com/rss.php?p=news",
				'url'  => "http://www.mirage-team.com",
				'email' => $app['mailer.error.receiver'],
				'status' => 1
			),
			array(
				'name' => "Shiranai Fansub Team",
				'feed' => "http://www.shiranai-fansub.fr/feed/",
				'url'  => "http://www.shiranai-fansub.fr/",
				'email' => $app['mailer.error.receiver'],
				'status' => 1
			),
		);

		$i = 0;
		foreach($teams as $data) {
			$team = new Team();
			$team->setName($data['name']);
			$team->setEmail($data['email']);
			$team->setUrl($data['url']);
			$team->setFeed($data['feed']);
			$team->setStatus(1);
			$team->save();
			$i++;
		}

		$output->writeln( $i . " teams imported ...");
	}
);

$console->run();

?>